#!/usr/bin/env python

"Script for plotting functional values for all result directories"

__author__ = "Kristoffer Selim and Anders Logg"
__copyright__ = "Copyright (C) 2010 Simula Research Laboratory and %s" % __author__
__license__  = "GNU GPL Version 3 or any later version"

import os, glob, sys
from numpy import argsort, array
from pylab import *

# Get command-line parameters
cases = ("M", "e", "E", "Eh", "Ek", "Ec", "Ec0", "Ec1", "I", "Ih", "Ik", "Ic", "k", "Rk")
if len(sys.argv) != 2 or not sys.argv[1] in cases:
    print "Usage: plot <variable>"
    print "where <variable> is one of %s" % ", ".join(cases)
    sys.exit(1)
variable = sys.argv[1]

# Set goal functional
goal_functional = 0

# Set reference value
reference_value = {0: 0.0200,
                   1: 0.2751,
                   2: 0.4856}[goal_functional]

def read(filename):
    return zip(*[[x for x in row.split(" ") if len(x) >0] for row in open(filename).read().split("\n") if " " in row and len(row) > 0])

def read_float(filename):
    return array([[float(x) for x in column] for column in read(filename)])

# Check all results directories
D   = []
M   = []
ETA = []
E   = []
EH  = []
EK  = []
EC  = []
EC0 = []
EC1 = []
I   = []
IH  = []
IK  = []
IC  = []
L   = []
T   = []
K   = []
RK  = []
for directory in glob.glob("results-*"):

    # Check for data
    if not os.path.isfile("%s/goal_functional_final.txt" % directory):
        continue

    # Get legend
    filename = "%s/application_parameters.xml" % directory
    row = [row for row in open(filename).read().split("\n") if "description" in row][0]
    l = row.split('value="')[1].split('"')[0]

    # Filter out data based on legend
    #if not "0.005" in l:
    #    continue
    #if not "0.3" in l:
    #    continue
    #if not "Dorfler" in l:
    #    continue

    #if "0.02" in l: continue

    print "Extracting values from %s" % directory

    # Store legend
    L.append(l)

    # Get number of dofs
    filename = "%s/num_dofs.txt" % directory
    if os.path.isfile(filename):
        d = read_float(filename)[2]
        D.append(d)
    else:
        D.append(None)

    # Get functional values
    filename = "%s/goal_functional_final.txt" % directory
    if os.path.isfile(filename):
        m = read_float(filename)[2]
        M.append(m)
        eta = abs(m - reference_value)
        ETA.append(abs(m - reference_value))
    else:
        M.append(None)
        ETA.append(None)

    print m

    # Get error estimates
    filename = "%s/error_estimates.txt" % directory
    if os.path.isfile(filename):
        e, eh, ek, ec, ec0, ec1 = read_float(filename)[1:]
    else:
        e = eh = ek = ec, ec0, ec1 = None
    E.append(e)
    EH.append(eh)
    EK.append(ek)
    EC.append(ec)
    EC0.append(abs(ec0))
    EC1.append(abs(ec1))

    # Compute efficiency index
    if e is not None:
        n = min(len(e), len(eta))
        i = e[:n] / eta[:n]
        ih = eh[:n] / eta[:n]
        ik = ek[:n] / eta[:n]
        ic = ec[:n] / eta[:n]
    else:
        i = ih = ik = ic = None
    I.append(i)
    IH.append(ih)
    IK.append(ik)
    IC.append(ic)

    # Get time and time steps
    filename = "%s/timesteps.txt" % directory
    try:
        level, t, k, rk, TOL_k = read_float(filename)
    except:
        t = k = rk = None
    T.append(t)
    K.append(k)
    RK.append(rk)

# Select variable to plot
X = D
_marker = 'o'
if variable == "M":
    Y = M
    _title  = "Convergence of goal functional"
    _ylabel = "$\mathcal{M}(u_h)$"
    _plot   = semilogx
elif variable == "e":
    Y = ETA
    _title  = "Error in goal functional"
    _ylabel = "$\eta = |\mathcal{M}(u_h) - \mathcal{M}(u)|$"
    _plot   = loglog
elif variable == "E":
    Y = E
    _title  = "Error estimate (total)"
    _ylabel = "$E$"
    _plot   = loglog
elif variable == "Eh":
    Y = EH
    _title  = "Space discretization error"
    _ylabel = "$E_h$"
    _plot   = loglog
elif variable == "Ek":
    Y = EK
    _title  = "Time discretization error"
    _ylabel = "$E_k$"
    _plot   = loglog
elif variable == "Ec":
    Y = EC
    _title  = "Computational error"
    _ylabel = "$E_c$"
    _plot   = loglog
elif variable == "Ec0":
    Y = EC0
    _title  = "Computational error (momentum)"
    _ylabel = "$E_c^{\mathrm{mom}}$"
    _plot   = loglog
elif variable == "Ec1":
    Y = EC1
    _title  = "Computational error (continuity)"
    _ylabel = "$E_c^{\mathrm{con}}$"
    _plot   = loglog
elif variable == "I":
    Y = I
    _title  = "Efficiency index (total)"
    _ylabel = "$E / \eta$"
    #_plot   = semilogx
    _plot   = loglog
elif variable == "Ih":
    Y = IH
    _title  = "Efficiency index ($I_h$)"
    _ylabel = "$E_h / \eta$"
    #_plot   = semilogx
    _plot   = loglog
elif variable == "Ik":
    Y = IK
    _title  = "Efficiency index ($I_k$)"
    _ylabel = "$E_k / \eta$"
    #_plot   = semilogx
    _plot   = loglog
elif variable == "Ic":
    Y = IC
    _title  = "Efficiency index ($I_c$)"
    _ylabel = "$E_c / \eta$"
    #_plot   = semilogx
    _plot   = loglog
elif variable == "k":
    X = T
    Y = K
    _title  = "Adaptive time steps"
    _xlabel = "$t$"
    _ylabel = "$k(t)$"
    _plot   = plot
    _marker = None
elif variable == "Rk":
    X = T
    Y = RK
    _title  = "Time residual"
    _xlabel = "$t$"
    _ylabel = "$R_k(t)$"
    _plot   = plot
    _marker = None

# Sort values by legend
indices = argsort(L)[:min(len(L), len(X))]

print X, Y

# Group values
plotvals = []
LL = []
for i in indices:

    # Get (x, y) sequence pair and check dimensions
    x = X[i]
    y = Y[i]
    if x is None or y is None:
        print "Warning: missing values for %s, skipping" % variable
        x = [1]
        y = [1]
    if len(y) < len(x):
        print "Warning: missing values for %s (only %d, expecting %d)" % (variable, len(y), len(x))
        x = x[:len(y)]

    # Split values if x is not increasing, which may happen if we have
    # stored multiple series to one file during refinement
    offset = 0
    level = 0
    for j in range(len(x) - 1):

        # Check for subset of data
        if x[j + 1] < x[j]:
            print "Found non-increasing x-values, splitting series"
            plotvals.append(x[offset:j + 1])
            plotvals.append(y[offset:j + 1])
            LL.append(L[i] + " level " + str(level))
            offset = j + 1
            level += 1

    # Add final data
    plotvals.append(x[offset:])
    plotvals.append(y[offset:])
    if offset == 0:
        LL.append(L[i])
    else:
        LL.append(L[i] + " level " + str(level))
L = LL

# Set fontsize for legend
rcParams.update({'legend.fontsize': 9})

# Plot functional values
max_plots = 13
for i in range((len(L) - 1) / max_plots + 1):

    #if i != 2:
    #    continue

    figure(i)
    subplot(2, 1, 1)
    xy = plotvals[2*i*max_plots:2*(i + 1)*max_plots]
    if _marker is None:
        _plot(*xy)
    else:
        _plot(*xy, marker=_marker)
    grid(True)
    xlabel("Number of dofs (in space)")
    ylabel(_ylabel)
    title(_title)
    legend(L[i*max_plots:(i + 1)*max_plots], bbox_to_anchor=(-0.1, -0.3), loc=2, borderaxespad=0)

show()
